// <auto-generated />
using System;
using Infrastructure.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ContextServer))]
    partial class ContextServerModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Comercio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AspNetUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CozinhaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TelefoneEntrega")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CozinhaCode")
                        .IsUnique();

                    b.HasIndex("UUID")
                        .IsUnique();

                    b.ToTable("Comercio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AspNetUsersId = new Guid("97aa75c4-1a41-4a20-a1d0-4fe1f1f5129b"),
                            CozinhaCode = "AC1",
                            DataCriacao = new DateTime(2025, 8, 5, 21, 58, 51, 953, DateTimeKind.Utc).AddTicks(1733),
                            Descricao = "Descricao do Comercio A",
                            Nome = "Comercio A",
                            NomeFantasia = "Comercio A Fantasia",
                            Status = 1,
                            TelefoneEntrega = "1234567890",
                            Tipo = 1,
                            UUID = new Guid("13e2f21a-4283-4ff8-bb7a-096e7b89e0f0")
                        },
                        new
                        {
                            Id = 2,
                            AspNetUsersId = new Guid("97aa75c4-1a41-4a20-a1d0-4fe1f1f5129b"),
                            CozinhaCode = "AF1",
                            DataCriacao = new DateTime(2025, 8, 5, 21, 58, 51, 953, DateTimeKind.Utc).AddTicks(2375),
                            Descricao = "Descricao do Comercio B",
                            Nome = "Comercio B",
                            NomeFantasia = "Comercio B Fantasia",
                            Status = 1,
                            TelefoneEntrega = "0987654321",
                            Tipo = 1,
                            UUID = new Guid("283264d6-0e5e-48fe-9d6e-b1599aa0892c")
                        },
                        new
                        {
                            Id = 3,
                            AspNetUsersId = new Guid("97aa75c4-1a41-4a20-a1d0-4fe1f1f5129b"),
                            CozinhaCode = "ALE",
                            DataCriacao = new DateTime(2025, 8, 5, 21, 58, 51, 953, DateTimeKind.Utc).AddTicks(2381),
                            Descricao = "Descricao do Comercio C",
                            Nome = "Comercio A",
                            NomeFantasia = "Comercio A Fantasia",
                            Status = 1,
                            TelefoneEntrega = "1122334455",
                            Tipo = 1,
                            UUID = new Guid("7cd0d373-c57d-4c70-aa8c-22791983fe1c")
                        },
                        new
                        {
                            Id = 4,
                            AspNetUsersId = new Guid("6377641f-33f7-4997-944c-997cc9d63d88"),
                            CozinhaCode = "LCH",
                            DataCriacao = new DateTime(2025, 8, 5, 21, 58, 51, 953, DateTimeKind.Utc).AddTicks(2383),
                            Descricao = "Descricao do Comercio D",
                            Nome = "Comercio D",
                            NomeFantasia = "Comercio D Fantasia",
                            Status = 1,
                            TelefoneEntrega = "2233445566",
                            Tipo = 1,
                            UUID = new Guid("b1c8f3d2-4e5f-4b6a-9c7e-0d8f9a1b2c3d")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cozinha", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Cozinhas");

                    b.HasData(
                        new
                        {
                            Code = "AC1",
                            Name = "Açaí"
                        },
                        new
                        {
                            Code = "AF1",
                            Name = "Africana"
                        },
                        new
                        {
                            Code = "ALE",
                            Name = "Alemã"
                        },
                        new
                        {
                            Code = "ARA",
                            Name = "Árabe"
                        },
                        new
                        {
                            Code = "AR1",
                            Name = "Argentina"
                        },
                        new
                        {
                            Code = "ASI",
                            Name = "Asiática"
                        },
                        new
                        {
                            Code = "BA1",
                            Name = "Baiana"
                        },
                        new
                        {
                            Code = "BRA",
                            Name = "Brasileira"
                        },
                        new
                        {
                            Code = "CA1",
                            Name = "Cafeteria"
                        },
                        new
                        {
                            Code = "CAR",
                            Name = "Carnes"
                        },
                        new
                        {
                            Code = "CS1",
                            Name = "Casa de Sucos"
                        },
                        new
                        {
                            Code = "CHI",
                            Name = "Chinesa"
                        },
                        new
                        {
                            Code = "CO1",
                            Name = "Colombiana"
                        },
                        new
                        {
                            Code = "CN1",
                            Name = "Congelados"
                        },
                        new
                        {
                            Code = "CF1",
                            Name = "Congelados Fit"
                        },
                        new
                        {
                            Code = "CNT",
                            Name = "Contemporânea"
                        },
                        new
                        {
                            Code = "CR1",
                            Name = "Coreana"
                        },
                        new
                        {
                            Code = "CRP",
                            Name = "Cozinha Rápida"
                        },
                        new
                        {
                            Code = "CP1",
                            Name = "Crepe"
                        },
                        new
                        {
                            Code = "DCE",
                            Name = "Doces & Bolos"
                        },
                        new
                        {
                            Code = "ES1",
                            Name = "Espanhola"
                        },
                        new
                        {
                            Code = "FRA",
                            Name = "Francesa"
                        },
                        new
                        {
                            Code = "FR1",
                            Name = "Frangos"
                        },
                        new
                        {
                            Code = "FRU",
                            Name = "Frutos Do Mar"
                        },
                        new
                        {
                            Code = "GA1",
                            Name = "Gaúcha"
                        },
                        new
                        {
                            Code = "GRC",
                            Name = "Grega"
                        },
                        new
                        {
                            Code = "BUR",
                            Name = "Hambúrguer"
                        },
                        new
                        {
                            Code = "IND",
                            Name = "Indiana"
                        },
                        new
                        {
                            Code = "ITA",
                            Name = "Italiana"
                        },
                        new
                        {
                            Code = "JAP",
                            Name = "Japonesa"
                        },
                        new
                        {
                            Code = "LCH",
                            Name = "Lanches"
                        },
                        new
                        {
                            Code = "MA1",
                            Name = "Marmita"
                        },
                        new
                        {
                            Code = "MAR",
                            Name = "Marroquina"
                        },
                        new
                        {
                            Code = "MED",
                            Name = "Mediterrânea"
                        },
                        new
                        {
                            Code = "MEX",
                            Name = "Mexicana"
                        },
                        new
                        {
                            Code = "MI1",
                            Name = "Mineira"
                        },
                        new
                        {
                            Code = "NO1",
                            Name = "Nordestina"
                        },
                        new
                        {
                            Code = "PA1",
                            Name = "Padaria"
                        },
                        new
                        {
                            Code = "PQC",
                            Name = "Panqueca"
                        },
                        new
                        {
                            Code = "PR1",
                            Name = "Paranaense"
                        },
                        new
                        {
                            Code = "PAS",
                            Name = "Pastel"
                        },
                        new
                        {
                            Code = "PX1",
                            Name = "Peixes"
                        },
                        new
                        {
                            Code = "PER",
                            Name = "Peruana"
                        },
                        new
                        {
                            Code = "PIZ",
                            Name = "Pizza"
                        },
                        new
                        {
                            Code = "POR",
                            Name = "Portuguesa"
                        },
                        new
                        {
                            Code = "PRE",
                            Name = "Presentes"
                        },
                        new
                        {
                            Code = "SAG",
                            Name = "Salgados"
                        },
                        new
                        {
                            Code = "SAU",
                            Name = "Saudável"
                        },
                        new
                        {
                            Code = "SP1",
                            Name = "Sopas & Caldos"
                        },
                        new
                        {
                            Code = "SOR",
                            Name = "Sorvetes"
                        },
                        new
                        {
                            Code = "THA",
                            Name = "Tailandesa"
                        },
                        new
                        {
                            Code = "TA1",
                            Name = "Tapioca"
                        },
                        new
                        {
                            Code = "TN1",
                            Name = "Típica do Norte"
                        },
                        new
                        {
                            Code = "VAR",
                            Name = "Variada"
                        },
                        new
                        {
                            Code = "VE1",
                            Name = "Vegana"
                        },
                        new
                        {
                            Code = "VEG",
                            Name = "Vegetariana"
                        },
                        new
                        {
                            Code = "XI1",
                            Name = "Xis"
                        },
                        new
                        {
                            Code = "YA1",
                            Name = "Yakisoba"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("ComercioId")
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referencia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComercioId");

                    b.ToTable("Enderecos");

                    b.HasData(
                        new
                        {
                            ComercioId = 1,
                            Bairro = "Bairro A",
                            CEP = "12345678",
                            Cidade = "Cidade A",
                            Estado = "Estado A",
                            Latitude = -9.8275970000000008,
                            Logradouro = "Rua A",
                            Longitude = -67.951076999999998,
                            Numero = "123",
                            Pais = "BR"
                        },
                        new
                        {
                            ComercioId = 2,
                            Bairro = "Bairro B",
                            CEP = "23456789",
                            Cidade = "Cidade B",
                            Estado = "Estado B",
                            Latitude = -9.8275970000000008,
                            Logradouro = "Rua B",
                            Longitude = -67.951076999999998,
                            Numero = "456",
                            Pais = "BR"
                        },
                        new
                        {
                            ComercioId = 3,
                            Bairro = "Bairro C",
                            CEP = "34567890",
                            Cidade = "Cidade C",
                            Estado = "Estado C",
                            Latitude = -9.8275970000000008,
                            Logradouro = "Rua C",
                            Longitude = -67.951076999999998,
                            Numero = "789",
                            Pais = "BR"
                        },
                        new
                        {
                            ComercioId = 4,
                            Bairro = "Bairro D",
                            CEP = "45678901",
                            Cidade = "Cidade D",
                            Estado = "Estado D",
                            Latitude = -9.8275970000000008,
                            Logradouro = "Rua D",
                            Longitude = -67.951076999999998,
                            Numero = "1011",
                            Pais = "BR"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Comercio", b =>
                {
                    b.HasOne("Domain.Entities.Cozinha", "Cozinha")
                        .WithOne("Comercio")
                        .HasForeignKey("Domain.Entities.Comercio", "CozinhaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cozinha");
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.HasOne("Domain.Entities.Comercio", "Comercio")
                        .WithOne("Endereco")
                        .HasForeignKey("Domain.Entities.Endereco", "ComercioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comercio");
                });

            modelBuilder.Entity("Domain.Entities.Comercio", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Cozinha", b =>
                {
                    b.Navigation("Comercio")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
